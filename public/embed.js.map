{
  "version": 3,
  "sources": ["../node_modules/@curia_/iframe-api-proxy/src/types/ApiTypes.ts", "../node_modules/@curia_/iframe-api-proxy/src/types/MessageTypes.ts", "../node_modules/@curia_/iframe-api-proxy/src/types/ProxyTypes.ts", "../node_modules/@curia_/iframe-api-proxy/src/client/ApiProxyClient.ts", "../node_modules/@curia_/iframe-api-proxy/src/server/ApiProxyServer.ts", "../node_modules/@curia_/iframe-api-proxy/src/index.ts", "../src/lib/embed/core/EmbedConfig.ts", "../src/lib/embed/plugin-host/InternalPluginHost.ts", "../src/lib/embed/embed-entry.ts"],
  "sourcesContent": ["/**\n * API Types - Shared interfaces for all API operations\n * \n * These types match the existing host service API structure\n * and ensure type safety across the proxy system.\n */\n\n/**\n * Base API request interface\n */\nexport interface ApiRequest {\n  method: string;\n  params?: Record<string, any>;\n  userId: string;\n  communityId: string;\n}\n\n/**\n * Base API response interface\n */\nexport interface ApiResponse<T = any> {\n  success: boolean;\n  data?: T;\n  error?: string;\n}\n\n/**\n * API method types that can be proxied\n */\nexport type ApiMethod = \n  | 'getUserInfo'\n  | 'getUserFriends'\n  | 'getContextData'\n  | 'getCommunityInfo'\n  | 'giveRole';\n\n/**\n * API endpoint mapping\n */\nexport const API_ENDPOINTS: Record<string, string> = {\n  getUserInfo: '/api/user',\n  getUserFriends: '/api/user',\n  getContextData: '/api/user',\n  getCommunityInfo: '/api/community',\n  giveRole: '/api/community'\n};\n\n/**\n * User API method types\n */\nexport interface GetUserInfoRequest extends ApiRequest {\n  method: 'getUserInfo';\n}\n\nexport interface GetUserFriendsRequest extends ApiRequest {\n  method: 'getUserFriends';\n  params: {\n    limit?: number;\n    offset?: number;\n  };\n}\n\nexport interface GetContextDataRequest extends ApiRequest {\n  method: 'getContextData';\n}\n\n/**\n * Community API method types\n */\nexport interface GetCommunityInfoRequest extends ApiRequest {\n  method: 'getCommunityInfo';\n}\n\nexport interface GiveRoleRequest extends ApiRequest {\n  method: 'giveRole';\n  params: {\n    roleId: string;\n    userId: string;\n  };\n}\n\n/**\n * Union type for all API requests\n */\nexport type ApiRequestUnion = \n  | GetUserInfoRequest\n  | GetUserFriendsRequest\n  | GetContextDataRequest\n  | GetCommunityInfoRequest\n  | GiveRoleRequest;\n\n/**\n * Helper function to get API endpoint for a method\n */\nexport function getEndpointForMethod(method: ApiMethod): string {\n  const endpoint = API_ENDPOINTS[method];\n  if (!endpoint) {\n    throw new Error(`Unknown API method: ${method}`);\n  }\n  return endpoint;\n}\n\n/**\n * Helper function to validate API request\n */\nexport function validateApiRequest(request: ApiRequest): request is ApiRequestUnion {\n  return !!(\n    request.method &&\n    request.userId &&\n    request.communityId &&\n    API_ENDPOINTS[request.method]\n  );\n} ", "/**\n * Message Types - PostMessage protocol for iframe communication\n * \n * Defines the message structure for communication between:\n * - Customer page (InternalPluginHost)\n * - Auth iframe (/embed route)\n * - Forum iframe (forum application)\n */\n\nimport { ApiRequest, ApiResponse } from './ApiTypes';\n\n/**\n * Message types used in the proxy system\n */\nexport enum MessageType {\n  // Original forum \u2192 host communication\n  API_REQUEST = 'api_request',\n  API_RESPONSE = 'api_response',\n  \n  // New proxy communication\n  PROXY_API_REQUEST = 'proxy-api-request',\n  PROXY_API_RESPONSE = 'proxy-api-response',\n  \n  // Error handling\n  PROXY_ERROR = 'proxy-error',\n  \n  // Initialization\n  PROXY_INIT = 'proxy-init',\n  PROXY_READY = 'proxy-ready'\n}\n\n/**\n * Base message interface\n */\nexport interface BaseMessage {\n  type: MessageType;\n  requestId: string;\n  timestamp?: number;\n}\n\n/**\n * Message from forum iframe to InternalPluginHost\n * (Original API request from forum)\n */\nexport interface ForumApiRequestMessage extends BaseMessage {\n  type: MessageType.API_REQUEST;\n  iframeUid: string;\n  method: string;\n  params?: any;\n}\n\n/**\n * Message from InternalPluginHost to active iframe\n * (Proxy request to iframe for API call)\n */\nexport interface ProxyApiRequestMessage extends BaseMessage {\n  type: MessageType.PROXY_API_REQUEST;\n  endpoint: string;\n  payload: ApiRequest;\n}\n\n/**\n * Message from active iframe to InternalPluginHost\n * (Proxy response with API result)\n */\nexport interface ProxyApiResponseMessage extends BaseMessage {\n  type: MessageType.PROXY_API_RESPONSE;\n  response: ApiResponse;\n}\n\n/**\n * Message from InternalPluginHost to forum iframe\n * (Final API response back to forum)\n */\nexport interface ForumApiResponseMessage extends BaseMessage {\n  type: MessageType.API_RESPONSE;\n  iframeUid: string;\n  data?: any;\n  error?: string;\n}\n\n/**\n * Error message for proxy failures\n */\nexport interface ProxyErrorMessage extends BaseMessage {\n  type: MessageType.PROXY_ERROR;\n  error: string;\n  originalRequestId?: string;\n}\n\n/**\n * Initialization messages\n */\nexport interface ProxyInitMessage extends BaseMessage {\n  type: MessageType.PROXY_INIT;\n  config: {\n    baseUrl: string;\n    timeout?: number;\n  };\n}\n\nexport interface ProxyReadyMessage extends BaseMessage {\n  type: MessageType.PROXY_READY;\n  serverId: string;\n}\n\n/**\n * Union type for all proxy messages\n */\nexport type ProxyMessage = \n  | ForumApiRequestMessage\n  | ProxyApiRequestMessage\n  | ProxyApiResponseMessage\n  | ForumApiResponseMessage\n  | ProxyErrorMessage\n  | ProxyInitMessage\n  | ProxyReadyMessage;\n\n/**\n * Type guards for message validation\n */\nexport function isProxyApiRequest(message: any): message is ProxyApiRequestMessage {\n  return message?.type === MessageType.PROXY_API_REQUEST && \n         message?.requestId && \n         message?.endpoint && \n         message?.payload;\n}\n\nexport function isProxyApiResponse(message: any): message is ProxyApiResponseMessage {\n  return message?.type === MessageType.PROXY_API_RESPONSE && \n         message?.requestId && \n         message?.response;\n}\n\nexport function isForumApiRequest(message: any): message is ForumApiRequestMessage {\n  return message?.type === MessageType.API_REQUEST && \n         message?.requestId && \n         message?.iframeUid && \n         message?.method;\n}\n\nexport function isProxyError(message: any): message is ProxyErrorMessage {\n  return message?.type === MessageType.PROXY_ERROR && \n         message?.requestId && \n         message?.error;\n}\n\n/**\n * Helper function to generate unique request IDs\n */\nexport function generateRequestId(): string {\n  return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n}\n\n/**\n * Helper function to create error message\n */\nexport function createErrorMessage(requestId: string, error: string, originalRequestId?: string): ProxyErrorMessage {\n  const message: ProxyErrorMessage = {\n    type: MessageType.PROXY_ERROR,\n    requestId,\n    error,\n    timestamp: Date.now()\n  };\n  \n  if (originalRequestId) {\n    message.originalRequestId = originalRequestId;\n  }\n  \n  return message;\n}\n\n/**\n * Helper function to create proxy request message\n */\nexport function createProxyRequest(requestId: string, endpoint: string, payload: ApiRequest): ProxyApiRequestMessage {\n  return {\n    type: MessageType.PROXY_API_REQUEST,\n    requestId,\n    endpoint,\n    payload,\n    timestamp: Date.now()\n  };\n}\n\n/**\n * Helper function to create proxy response message\n */\nexport function createProxyResponse(requestId: string, response: ApiResponse): ProxyApiResponseMessage {\n  return {\n    type: MessageType.PROXY_API_RESPONSE,\n    requestId,\n    response,\n    timestamp: Date.now()\n  };\n} ", "/**\n * Proxy Types - Configuration and setup types for the proxy system\n * \n * Defines configuration interfaces for both client and server\n * components of the API proxy system.\n */\n\n/**\n * Configuration for the API proxy client (customer page)\n */\nexport interface ProxyClientConfig {\n  /** Default timeout for API requests in milliseconds */\n  defaultTimeout?: number;\n  \n  /** Maximum number of retry attempts for failed requests */\n  maxRetries?: number;\n  \n  /** Retry delay in milliseconds */\n  retryDelay?: number;\n  \n  /** Whether to log debug messages */\n  debug?: boolean;\n  \n  /** Custom request ID prefix */\n  requestIdPrefix?: string;\n}\n\n/**\n * Configuration for the API proxy server (iframe)\n */\nexport interface ProxyServerConfig {\n  /** Base URL for API requests */\n  baseUrl: string;\n  \n  /** Request timeout in milliseconds */\n  timeout?: number;\n  \n  /** Whether to log debug messages */\n  debug?: boolean;\n  \n  /** Custom headers to include in API requests */\n  headers?: Record<string, string>;\n  \n  /** Allowed origins for security (empty array = allow all) */\n  allowedOrigins?: string[];\n  \n  /** Custom server ID for identification */\n  serverId?: string;\n}\n\n/**\n * Default configurations\n */\nexport const DEFAULT_CLIENT_CONFIG: Required<ProxyClientConfig> = {\n  defaultTimeout: 10000, // 10 seconds\n  maxRetries: 3,\n  retryDelay: 1000, // 1 second\n  debug: false,\n  requestIdPrefix: 'proxy'\n};\n\nexport const DEFAULT_SERVER_CONFIG: Required<Omit<ProxyServerConfig, 'baseUrl'>> = {\n  timeout: 30000, // 30 seconds\n  debug: false,\n  headers: {},\n  allowedOrigins: [],\n  serverId: `server_${Date.now()}`\n};\n\n/**\n * Request timeout information\n */\nexport interface RequestTimeout {\n  requestId: string;\n  timeoutId: NodeJS.Timeout;\n  startTime: number;\n  timeoutMs: number;\n}\n\n/**\n * Pending request information\n */\nexport interface PendingRequest {\n  requestId: string;\n  resolve: (response: any) => void;\n  reject: (error: Error) => void;\n  startTime: number;\n  retryCount: number;\n  originalRequest: any;\n}\n\n/**\n * Proxy client status\n */\nexport interface ProxyClientStatus {\n  isInitialized: boolean;\n  activeIframeCount: number;\n  pendingRequestCount: number;\n  totalRequestCount: number;\n  errorCount: number;\n  averageResponseTime: number;\n  lastActivityTime: number;\n}\n\n/**\n * Proxy server status\n */\nexport interface ProxyServerStatus {\n  isInitialized: boolean;\n  serverId: string;\n  baseUrl: string;\n  requestCount: number;\n  errorCount: number;\n  startTime: number;\n  lastRequestTime: number;\n}\n\n/**\n * Error types for the proxy system\n */\nexport enum ProxyErrorType {\n  TIMEOUT = 'TIMEOUT',\n  NETWORK_ERROR = 'NETWORK_ERROR',\n  INVALID_REQUEST = 'INVALID_REQUEST',\n  INVALID_RESPONSE = 'INVALID_RESPONSE',\n  NO_ACTIVE_IFRAME = 'NO_ACTIVE_IFRAME',\n  INITIALIZATION_ERROR = 'INITIALIZATION_ERROR',\n  PERMISSION_DENIED = 'PERMISSION_DENIED',\n  UNKNOWN_ERROR = 'UNKNOWN_ERROR'\n}\n\n/**\n * Proxy error interface\n */\nexport interface ProxyError extends Error {\n  type: ProxyErrorType;\n  requestId?: string;\n  originalError?: Error;\n  timestamp: number;\n}\n\n/**\n * Helper function to create proxy error\n */\nexport function createProxyError(\n  type: ProxyErrorType,\n  message: string,\n  requestId?: string,\n  originalError?: Error\n): ProxyError {\n  const error = new Error(message) as ProxyError;\n  error.type = type;\n  error.timestamp = Date.now();\n  \n  if (requestId) {\n    error.requestId = requestId;\n  }\n  \n  if (originalError) {\n    error.originalError = originalError;\n  }\n  \n  return error;\n}\n\n/**\n * Helper function to merge client config with defaults\n */\nexport function mergeClientConfig(config?: Partial<ProxyClientConfig>): Required<ProxyClientConfig> {\n  return {\n    ...DEFAULT_CLIENT_CONFIG,\n    ...config\n  };\n}\n\n/**\n * Helper function to merge server config with defaults\n */\nexport function mergeServerConfig(config: ProxyServerConfig): Required<ProxyServerConfig> {\n  return {\n    ...DEFAULT_SERVER_CONFIG,\n    ...config\n  };\n}\n\n/**\n * Helper function to validate server config\n */\nexport function validateServerConfig(config: ProxyServerConfig): void {\n  if (!config.baseUrl) {\n    throw new Error('baseUrl is required for proxy server configuration');\n  }\n  \n  if (!config.baseUrl.startsWith('http')) {\n    throw new Error('baseUrl must be a valid HTTP/HTTPS URL');\n  }\n  \n  if (config.timeout && config.timeout < 1000) {\n    throw new Error('timeout must be at least 1000ms');\n  }\n}\n\n/**\n * Helper function to check if origin is allowed\n */\nexport function isOriginAllowed(origin: string, allowedOrigins: string[]): boolean {\n  // If no allowed origins specified, allow all\n  if (allowedOrigins.length === 0) {\n    return true;\n  }\n  \n  // Check exact match\n  if (allowedOrigins.includes(origin)) {\n    return true;\n  }\n  \n  // Check wildcard patterns\n  return allowedOrigins.some(allowed => {\n    if (allowed.includes('*')) {\n      const pattern = allowed.replace(/\\*/g, '.*');\n      return new RegExp(`^${pattern}$`).test(origin);\n    }\n    return false;\n  });\n} ", "/**\n * API Proxy Client - Customer page component\n * \n * Runs in the customer page context and proxies API requests\n * through active iframes to bypass CSP restrictions.\n */\n\nimport { \n  ApiRequest, \n  ApiResponse, \n  getEndpointForMethod, \n  validateApiRequest \n} from '../types/ApiTypes';\nimport { \n  ProxyApiResponseMessage,\n  isProxyApiResponse,\n  isProxyError,\n  generateRequestId,\n  createProxyRequest \n} from '../types/MessageTypes';\nimport { \n  ProxyClientConfig, \n  ProxyClientStatus, \n  ProxyError, \n  ProxyErrorType, \n  PendingRequest, \n  RequestTimeout,\n  mergeClientConfig,\n  createProxyError \n} from '../types/ProxyTypes';\n\n/**\n * API Proxy Client\n * \n * Handles API requests from forum iframes by proxying them through\n * the active iframe (auth or forum) to bypass CSP restrictions.\n */\nexport class ApiProxyClient {\n  private config: Required<ProxyClientConfig>;\n  private isInitialized: boolean = false;\n  private activeIframe: HTMLIFrameElement | null = null;\n  private pendingRequests = new Map<string, PendingRequest>();\n  private requestTimeouts = new Map<string, RequestTimeout>();\n  private messageListener: ((event: MessageEvent) => void) | null = null;\n  \n  // Statistics\n  private totalRequests = 0;\n  private totalErrors = 0;\n  private responseTimes: number[] = [];\n  private lastActivityTime = 0;\n\n  constructor(config?: Partial<ProxyClientConfig>) {\n    this.config = mergeClientConfig(config);\n    this.initialize();\n  }\n\n  /**\n   * Initialize the proxy client\n   */\n  private initialize(): void {\n    this.setupMessageListener();\n    this.isInitialized = true;\n    \n    if (this.config.debug) {\n      console.log('[ApiProxyClient] Initialized with config:', this.config);\n    }\n  }\n\n  /**\n   * Set up the message listener for iframe communication\n   */\n  private setupMessageListener(): void {\n    if (this.messageListener) {\n      window.removeEventListener('message', this.messageListener);\n    }\n\n    this.messageListener = (event: MessageEvent) => {\n      if (!event.data || typeof event.data !== 'object') {\n        return;\n      }\n\n      // Handle proxy API responses\n      if (isProxyApiResponse(event.data)) {\n        this.handleProxyResponse(event.data);\n      }\n      \n      // Handle proxy errors\n      if (isProxyError(event.data)) {\n        this.handleProxyError(event.data);\n      }\n    };\n\n    window.addEventListener('message', this.messageListener);\n  }\n\n  /**\n   * Set the active iframe for API requests\n   */\n  public setActiveIframe(iframe: HTMLIFrameElement): void {\n    this.activeIframe = iframe;\n    \n    if (this.config.debug) {\n      console.log('[ApiProxyClient] Active iframe set:', iframe.src);\n    }\n  }\n\n  /**\n   * Clear the active iframe\n   */\n  public clearActiveIframe(): void {\n    this.activeIframe = null;\n    \n    if (this.config.debug) {\n      console.log('[ApiProxyClient] Active iframe cleared');\n    }\n  }\n\n  /**\n   * Make an API request through the active iframe\n   */\n  public async makeApiRequest(request: ApiRequest): Promise<ApiResponse> {\n    if (!this.isInitialized) {\n      throw createProxyError(\n        ProxyErrorType.INITIALIZATION_ERROR,\n        'Proxy client not initialized'\n      );\n    }\n\n    if (!this.activeIframe) {\n      throw createProxyError(\n        ProxyErrorType.NO_ACTIVE_IFRAME,\n        'No active iframe available for API requests'\n      );\n    }\n\n    if (!validateApiRequest(request)) {\n      throw createProxyError(\n        ProxyErrorType.INVALID_REQUEST,\n        'Invalid API request format'\n      );\n    }\n\n    const requestId = generateRequestId();\n    const startTime = Date.now();\n    this.totalRequests++;\n    this.lastActivityTime = startTime;\n\n    return new Promise((resolve, reject) => {\n      try {\n        // Store pending request\n        const pendingRequest: PendingRequest = {\n          requestId,\n          resolve,\n          reject,\n          startTime,\n          retryCount: 0,\n          originalRequest: request\n        };\n        \n        this.pendingRequests.set(requestId, pendingRequest);\n        \n        // Set up timeout\n        this.setupRequestTimeout(requestId);\n        \n        // Send request to active iframe\n        this.sendRequestToIframe(requestId, request);\n        \n        if (this.config.debug) {\n          console.log('[ApiProxyClient] API request sent:', {\n            requestId,\n            method: request.method,\n            userId: request.userId,\n            communityId: request.communityId\n          });\n        }\n        \n      } catch (error) {\n        this.cleanupRequest(requestId);\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Send request to the active iframe\n   */\n  private sendRequestToIframe(requestId: string, request: ApiRequest): void {\n    if (!this.activeIframe?.contentWindow) {\n      throw createProxyError(\n        ProxyErrorType.NO_ACTIVE_IFRAME,\n        'Active iframe content window not available'\n      );\n    }\n\n    const endpoint = getEndpointForMethod(request.method as any);\n    const message = createProxyRequest(requestId, endpoint, request);\n    \n    this.activeIframe.contentWindow.postMessage(message, '*');\n  }\n\n  /**\n   * Set up request timeout\n   */\n  private setupRequestTimeout(requestId: string): void {\n    const timeoutId = setTimeout(() => {\n      this.handleRequestTimeout(requestId);\n    }, this.config.defaultTimeout);\n\n    this.requestTimeouts.set(requestId, {\n      requestId,\n      timeoutId,\n      startTime: Date.now(),\n      timeoutMs: this.config.defaultTimeout\n    });\n  }\n\n  /**\n   * Handle request timeout\n   */\n  private handleRequestTimeout(requestId: string): void {\n    const pendingRequest = this.pendingRequests.get(requestId);\n    if (!pendingRequest) {\n      return;\n    }\n\n    const error = createProxyError(\n      ProxyErrorType.TIMEOUT,\n      `Request timeout after ${this.config.defaultTimeout}ms`,\n      requestId\n    );\n\n    this.handleRequestError(requestId, error);\n  }\n\n  /**\n   * Handle proxy response from iframe\n   */\n  private handleProxyResponse(message: ProxyApiResponseMessage): void {\n    const pendingRequest = this.pendingRequests.get(message.requestId);\n    if (!pendingRequest) {\n      if (this.config.debug) {\n        console.warn('[ApiProxyClient] Received response for unknown request:', message.requestId);\n      }\n      return;\n    }\n\n    const responseTime = Date.now() - pendingRequest.startTime;\n    this.responseTimes.push(responseTime);\n    \n    // Keep only last 100 response times for average calculation\n    if (this.responseTimes.length > 100) {\n      this.responseTimes.shift();\n    }\n\n    this.cleanupRequest(message.requestId);\n    pendingRequest.resolve(message.response);\n\n    if (this.config.debug) {\n      console.log('[ApiProxyClient] API response received:', {\n        requestId: message.requestId,\n        responseTime: `${responseTime}ms`,\n        success: message.response.success\n      });\n    }\n  }\n\n  /**\n   * Handle proxy error from iframe\n   */\n  private handleProxyError(message: any): void {\n    const error = createProxyError(\n      ProxyErrorType.NETWORK_ERROR,\n      message.error,\n      message.requestId\n    );\n\n    this.handleRequestError(message.requestId, error);\n  }\n\n  /**\n   * Handle request error\n   */\n  private handleRequestError(requestId: string, error: ProxyError): void {\n    const pendingRequest = this.pendingRequests.get(requestId);\n    if (!pendingRequest) {\n      return;\n    }\n\n    this.totalErrors++;\n    this.cleanupRequest(requestId);\n    \n    // Check if we should retry\n    if (pendingRequest.retryCount < this.config.maxRetries) {\n      this.retryRequest(pendingRequest, error);\n    } else {\n      pendingRequest.reject(error);\n    }\n  }\n\n  /**\n   * Retry a failed request\n   */\n  private retryRequest(pendingRequest: PendingRequest, lastError: ProxyError): void {\n    pendingRequest.retryCount++;\n    \n    if (this.config.debug) {\n      console.log('[ApiProxyClient] Retrying request:', {\n        requestId: pendingRequest.requestId,\n        retryCount: pendingRequest.retryCount,\n        lastError: lastError.message\n      });\n    }\n\n    setTimeout(() => {\n      if (this.activeIframe) {\n        this.pendingRequests.set(pendingRequest.requestId, pendingRequest);\n        this.setupRequestTimeout(pendingRequest.requestId);\n        this.sendRequestToIframe(pendingRequest.requestId, pendingRequest.originalRequest);\n      } else {\n        pendingRequest.reject(lastError);\n      }\n    }, this.config.retryDelay);\n  }\n\n  /**\n   * Clean up request resources\n   */\n  private cleanupRequest(requestId: string): void {\n    this.pendingRequests.delete(requestId);\n    \n    const timeout = this.requestTimeouts.get(requestId);\n    if (timeout) {\n      clearTimeout(timeout.timeoutId);\n      this.requestTimeouts.delete(requestId);\n    }\n  }\n\n  /**\n   * Get proxy client status\n   */\n  public getStatus(): ProxyClientStatus {\n    const averageResponseTime = this.responseTimes.length > 0\n      ? this.responseTimes.reduce((sum, time) => sum + time, 0) / this.responseTimes.length\n      : 0;\n\n    return {\n      isInitialized: this.isInitialized,\n      activeIframeCount: this.activeIframe ? 1 : 0,\n      pendingRequestCount: this.pendingRequests.size,\n      totalRequestCount: this.totalRequests,\n      errorCount: this.totalErrors,\n      averageResponseTime: Math.round(averageResponseTime),\n      lastActivityTime: this.lastActivityTime\n    };\n  }\n\n  /**\n   * Destroy the proxy client\n   */\n  public destroy(): void {\n    // Clear all pending requests\n    this.pendingRequests.forEach(request => {\n      request.reject(createProxyError(\n        ProxyErrorType.INITIALIZATION_ERROR,\n        'Proxy client destroyed'\n      ));\n    });\n    this.pendingRequests.clear();\n\n    // Clear all timeouts\n    this.requestTimeouts.forEach(timeout => {\n      clearTimeout(timeout.timeoutId);\n    });\n    this.requestTimeouts.clear();\n\n    // Remove message listener\n    if (this.messageListener) {\n      window.removeEventListener('message', this.messageListener);\n      this.messageListener = null;\n    }\n\n    // Clear active iframe\n    this.activeIframe = null;\n    this.isInitialized = false;\n\n    if (this.config.debug) {\n      console.log('[ApiProxyClient] Destroyed');\n    }\n  }\n} ", "/**\n * API Proxy Server - Iframe component\n * \n * Runs inside iframes (auth or forum) and handles API requests\n * from the customer page by making actual API calls to the host service.\n */\n\nimport { ApiRequest, ApiResponse } from '../types/ApiTypes';\nimport { \n  ProxyApiRequestMessage,\n  isProxyApiRequest,\n  createProxyResponse\n} from '../types/MessageTypes';\nimport { \n  ProxyServerConfig, \n  ProxyServerStatus, \n  ProxyErrorType, \n  mergeServerConfig,\n  validateServerConfig,\n  createProxyError,\n  isOriginAllowed\n} from '../types/ProxyTypes';\n\n/**\n * API Proxy Server\n * \n * Handles API proxy requests from the customer page by making\n * actual API calls to the host service and returning responses.\n */\nexport class ApiProxyServer {\n  private config: Required<ProxyServerConfig>;\n  private isInitialized: boolean = false;\n  private messageListener: ((event: MessageEvent) => void) | null = null;\n  \n  // Statistics\n  private requestCount = 0;\n  private errorCount = 0;\n  private startTime = Date.now();\n  private lastRequestTime = 0;\n\n  constructor(config: ProxyServerConfig) {\n    validateServerConfig(config);\n    this.config = mergeServerConfig(config);\n    this.initialize();\n  }\n\n  /**\n   * Initialize the proxy server\n   */\n  private initialize(): void {\n    this.setupMessageListener();\n    this.isInitialized = true;\n    \n    if (this.config.debug) {\n      console.log('[ApiProxyServer] Initialized with config:', {\n        baseUrl: this.config.baseUrl,\n        serverId: this.config.serverId,\n        timeout: this.config.timeout,\n        allowedOrigins: this.config.allowedOrigins\n      });\n    }\n  }\n\n  /**\n   * Set up message listener for proxy requests\n   */\n  private setupMessageListener(): void {\n    if (this.messageListener) {\n      window.removeEventListener('message', this.messageListener);\n    }\n\n    this.messageListener = (event: MessageEvent) => {\n      // Security check: validate origin if configured\n      if (this.config.allowedOrigins.length > 0) {\n        if (!isOriginAllowed(event.origin, this.config.allowedOrigins)) {\n          if (this.config.debug) {\n            console.warn('[ApiProxyServer] Request from unauthorized origin:', event.origin);\n          }\n          return;\n        }\n      }\n\n      if (!event.data || typeof event.data !== 'object') {\n        return;\n      }\n\n      // Handle proxy API requests\n      if (isProxyApiRequest(event.data)) {\n        this.handleProxyRequest(event.data, event.source as Window);\n      }\n    };\n\n    window.addEventListener('message', this.messageListener);\n  }\n\n  /**\n   * Handle incoming proxy API request\n   */\n  private async handleProxyRequest(message: ProxyApiRequestMessage, source: Window): Promise<void> {\n    this.requestCount++;\n    this.lastRequestTime = Date.now();\n\n    if (this.config.debug) {\n      console.log('[ApiProxyServer] Received proxy request:', {\n        requestId: message.requestId,\n        endpoint: message.endpoint,\n        method: message.payload.method,\n        userId: message.payload.userId,\n        communityId: message.payload.communityId\n      });\n    }\n\n    try {\n      // Make API request to host service\n      const response = await this.makeApiRequest(message.endpoint, message.payload);\n      \n      // Send successful response back to client\n      this.sendSuccessResponse(source, message.requestId, response);\n      \n    } catch (error) {\n      this.errorCount++;\n      \n      if (this.config.debug) {\n        console.error('[ApiProxyServer] API request failed:', {\n          requestId: message.requestId,\n          error: error instanceof Error ? error.message : 'Unknown error'\n        });\n      }\n      \n      // Send error response back to client\n      this.sendErrorResponse(source, message.requestId, error);\n    }\n  }\n\n  /**\n   * Make API request to host service\n   */\n  private async makeApiRequest(endpoint: string, payload: ApiRequest): Promise<ApiResponse> {\n    const url = `${this.config.baseUrl}${endpoint}`;\n    \n    const requestOptions: RequestInit = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        ...this.config.headers\n      },\n      body: JSON.stringify(payload)\n    };\n\n    // Add timeout if supported\n    if (this.config.timeout > 0) {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), this.config.timeout);\n      requestOptions.signal = controller.signal;\n      \n      try {\n        const response = await fetch(url, requestOptions);\n        clearTimeout(timeoutId);\n        return await this.processResponse(response);\n      } catch (error) {\n        clearTimeout(timeoutId);\n        throw error;\n      }\n    } else {\n      const response = await fetch(url, requestOptions);\n      return await this.processResponse(response);\n    }\n  }\n\n  /**\n   * Process API response from host service\n   */\n  private async processResponse(response: Response): Promise<ApiResponse> {\n    if (!response.ok) {\n      throw createProxyError(\n        ProxyErrorType.NETWORK_ERROR,\n        `HTTP ${response.status}: ${response.statusText}`\n      );\n    }\n\n    let data: any;\n    try {\n      data = await response.json();\n    } catch (error) {\n      throw createProxyError(\n        ProxyErrorType.INVALID_RESPONSE,\n        'Invalid JSON response from API'\n      );\n    }\n\n    // Validate response structure\n    if (typeof data !== 'object' || data === null) {\n      throw createProxyError(\n        ProxyErrorType.INVALID_RESPONSE,\n        'Invalid response format from API'\n      );\n    }\n\n    return data;\n  }\n\n  /**\n   * Send successful response back to client\n   */\n  private sendSuccessResponse(source: Window, requestId: string, response: ApiResponse): void {\n    const message = createProxyResponse(requestId, response);\n    source.postMessage(message, '*');\n\n    if (this.config.debug) {\n      console.log('[ApiProxyServer] Success response sent:', {\n        requestId,\n        success: response.success\n      });\n    }\n  }\n\n  /**\n   * Send error response back to client\n   */\n  private sendErrorResponse(source: Window, requestId: string, error: any): void {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    const response: ApiResponse = {\n      success: false,\n      error: errorMessage\n    };\n\n    const message = createProxyResponse(requestId, response);\n    source.postMessage(message, '*');\n\n    if (this.config.debug) {\n      console.log('[ApiProxyServer] Error response sent:', {\n        requestId,\n        error: errorMessage\n      });\n    }\n  }\n\n  /**\n   * Get proxy server status\n   */\n  public getStatus(): ProxyServerStatus {\n    return {\n      isInitialized: this.isInitialized,\n      serverId: this.config.serverId,\n      baseUrl: this.config.baseUrl,\n      requestCount: this.requestCount,\n      errorCount: this.errorCount,\n      startTime: this.startTime,\n      lastRequestTime: this.lastRequestTime\n    };\n  }\n\n  /**\n   * Destroy the proxy server\n   */\n  public destroy(): void {\n    // Remove message listener\n    if (this.messageListener) {\n      window.removeEventListener('message', this.messageListener);\n      this.messageListener = null;\n    }\n\n    this.isInitialized = false;\n\n    if (this.config.debug) {\n      console.log('[ApiProxyServer] Destroyed');\n    }\n  }\n} ", "/**\n * @curia/iframe-api-proxy - Main exports\n * \n * API proxy system for iframe-based applications to bypass CSP restrictions.\n * Provides client-side (customer page) and server-side (iframe) components.\n */\n\n// Core client components\nexport { ApiProxyClient } from './client/ApiProxyClient';\n\n// Core server components\nexport { ApiProxyServer } from './server/ApiProxyServer';\n\n// Import for use in helper functions\nimport { ApiProxyClient } from './client/ApiProxyClient';\nimport { ApiProxyServer } from './server/ApiProxyServer';\n\n// Type definitions\nexport {\n  // API types\n  ApiRequest,\n  ApiResponse,\n  ApiMethod,\n  ApiRequestUnion,\n  GetUserInfoRequest,\n  GetUserFriendsRequest,\n  GetContextDataRequest,\n  GetCommunityInfoRequest,\n  GiveRoleRequest,\n  API_ENDPOINTS,\n  getEndpointForMethod,\n  validateApiRequest\n} from './types/ApiTypes';\n\nexport {\n  // Message types\n  MessageType,\n  BaseMessage,\n  ForumApiRequestMessage,\n  ProxyApiRequestMessage,\n  ProxyApiResponseMessage,\n  ForumApiResponseMessage,\n  ProxyErrorMessage,\n  ProxyInitMessage,\n  ProxyReadyMessage,\n  ProxyMessage,\n  isProxyApiRequest,\n  isProxyApiResponse,\n  isForumApiRequest,\n  isProxyError,\n  generateRequestId,\n  createErrorMessage,\n  createProxyRequest,\n  createProxyResponse\n} from './types/MessageTypes';\n\nexport {\n  // Proxy configuration types\n  ProxyClientConfig,\n  ProxyServerConfig,\n  ProxyClientStatus,\n  ProxyServerStatus,\n  ProxyError,\n  ProxyErrorType,\n  PendingRequest,\n  RequestTimeout,\n  DEFAULT_CLIENT_CONFIG,\n  DEFAULT_SERVER_CONFIG,\n  createProxyError,\n  mergeClientConfig,\n  mergeServerConfig,\n  validateServerConfig,\n  isOriginAllowed\n} from './types/ProxyTypes';\n\n// Version information\nexport const VERSION = '1.0.0';\n\n// Package information\nexport const PACKAGE_NAME = '@curia/iframe-api-proxy';\n\n/**\n * Quick start helper for client-side integration\n */\nexport function createProxyClient(config?: Partial<import('./types/ProxyTypes').ProxyClientConfig>): ApiProxyClient {\n  return new ApiProxyClient(config);\n}\n\n/**\n * Quick start helper for server-side integration\n */\nexport function createProxyServer(config: import('./types/ProxyTypes').ProxyServerConfig): ApiProxyServer {\n  return new ApiProxyServer(config);\n}\n\n/**\n * Package metadata\n */\nexport const METADATA = {\n  name: PACKAGE_NAME,\n  version: VERSION,\n  description: 'API proxy system for iframe-based applications to bypass CSP restrictions',\n  repository: 'https://github.com/curia/host-service/tree/main/packages/iframe-api-proxy',\n  documentation: 'https://github.com/curia/host-service/blob/main/packages/iframe-api-proxy/README.md'\n} as const; ", "/**\n * Embed Configuration Module\n * \n * Handles parsing configuration from script data attributes\n */\n\nimport { EmbedConfig } from '../types/EmbedTypes';\n\n/**\n * Parse configuration from script data attributes\n */\nexport function parseEmbedConfig(scriptElement?: HTMLScriptElement): EmbedConfig {\n  // Get the script element - either passed in or from document.currentScript\n  const script = scriptElement || (document.currentScript as HTMLScriptElement);\n  if (!script) {\n    throw new Error('[Curia] Could not find script element');\n  }\n\n  // Read configuration from data attributes\n  const config: EmbedConfig = {\n    community: script.getAttribute('data-community') || null,\n    theme: (script.getAttribute('data-theme') as 'light' | 'dark' | 'auto') || 'light',\n    backgroundColor: script.getAttribute('data-background-color') || undefined,\n    borderRadius: script.getAttribute('data-border-radius') || undefined,\n    container: script.getAttribute('data-container') || null,\n    height: script.getAttribute('data-height') || '600px',\n    width: script.getAttribute('data-width') || '100%',\n    mode: (script.getAttribute('data-mode') as 'full' | 'auth-only') || 'full'\n  };\n\n  console.log('[Curia] Parsed embed config:', config);\n  return config;\n}\n\n/**\n * Validate embed configuration\n */\nexport function validateEmbedConfig(config: EmbedConfig): void {\n  // Validate theme\n  if (config.theme !== 'light' && config.theme !== 'dark' && config.theme !== 'auto') {\n    console.warn('[Curia] Invalid theme, using light:', config.theme);\n    config.theme = 'light';\n  }\n\n  // Validate background color (if provided)\n  if (config.backgroundColor && !config.backgroundColor.match(/^#[0-9A-Fa-f]{6}$/)) {\n    console.warn('[Curia] Invalid background color format, removing:', config.backgroundColor);\n    config.backgroundColor = undefined;\n  }\n\n  // Validate height format\n  if (config.height && !config.height.match(/^\\d+(px|%|vh|em|rem)$/)) {\n    console.warn('[Curia] Invalid height format, using 600px:', config.height);\n    config.height = '600px';\n  }\n\n  // Validate width format\n  if (config.width && !config.width.match(/^\\d+(px|%|vw|em|rem)$/)) {\n    console.warn('[Curia] Invalid width format, using 100%:', config.width);\n    config.width = '100%';\n  }\n}\n\n/**\n * Generate embed script configuration JavaScript\n */\nexport function generateConfigCode(config: EmbedConfig): string {\n  return `\n  // Get the script element that loaded this code\n  const script = document.currentScript;\n  if (!script) {\n    console.error('[Curia] Could not find script element');\n    return;\n  }\n\n  // Read configuration from data attributes\n  const config = {\n    community: script.getAttribute('data-community') || null,\n    theme: script.getAttribute('data-theme') || 'light',\n    backgroundColor: script.getAttribute('data-background-color') || undefined,\n    borderRadius: script.getAttribute('data-border-radius') || undefined,\n    container: script.getAttribute('data-container') || null,\n    height: script.getAttribute('data-height') || '600px',\n    width: script.getAttribute('data-width') || '100%'\n  };\n\n  console.log('[Curia] Initializing embed with config:', config);\n  `;\n} ", "/**\n * Internal Plugin Host - Self-contained plugin hosting within embed script\n * \n * This class embeds all ClientPluginHost functionality directly into the embed script,\n * making it completely self-contained so customers don't need to implement any logic.\n * \n * Responsibilities:\n * 1. Handle auth completion from embed iframe\n * 2. Manage iframe switching (auth \u2192 forum)\n * 3. Route API requests from forum to host service\n * 4. Maintain auth context throughout session\n */\n\nimport { EmbedConfig } from '../types/EmbedTypes';\nimport { ApiProxyClient } from '@curia_/iframe-api-proxy';\n\n/**\n * Authentication context for API requests\n */\nexport interface InternalAuthContext {\n  userId: string;\n  communityId: string;\n  sessionToken?: string;\n  externalParams?: Record<string, string>;\n  parentUrl?: string;\n}\n\n/**\n * Message types for internal communication\n */\nenum InternalMessageType {\n  API_REQUEST = 'api_request',\n  API_RESPONSE = 'api_response',\n  INIT = 'init',\n  ERROR = 'error'\n}\n\n/**\n * Internal plugin message interface\n */\ninterface InternalPluginMessage {\n  type: InternalMessageType;\n  iframeUid: string;\n  requestId: string;\n  method?: string;\n  params?: any;\n  data?: any;\n  error?: string;\n}\n\n/**\n * Get iframe permissions for forum functionality\n */\nfunction getIframePermissions(): string {\n  return [\n    'clipboard-write *',\n    'clipboard-read *', \n    'fullscreen *',\n    'web-share *',\n    'autoplay *',\n    'picture-in-picture *',\n    'payment *',\n    'encrypted-media *',\n    'storage-access *',\n    'camera *',\n    'microphone *',\n    'geolocation *'\n  ].join('; ');\n}\n\n/**\n * Internal Plugin Host - completely self-contained within embed script\n */\nexport class InternalPluginHost {\n  private container: HTMLElement;\n  private config: EmbedConfig;\n  private authContext: InternalAuthContext | null = null;\n  private currentIframe: HTMLIFrameElement | null = null;\n  private myUid: string; // Instance-specific UID (not singleton)\n  private hostServiceUrl: string;\n  private forumUrl: string;\n  private messageListener: ((event: MessageEvent) => void) | null = null;\n  private apiProxy: ApiProxyClient;\n\n  constructor(container: HTMLElement, config: EmbedConfig, hostServiceUrl: string, forumUrl: string) {\n    this.container = container;\n    this.config = config;\n    this.hostServiceUrl = hostServiceUrl;\n    this.forumUrl = forumUrl;\n    this.myUid = this.generateIframeUid(); // Generate instance-specific UID\n    \n    // Initialize API proxy client\n    this.apiProxy = new ApiProxyClient({\n      debug: true,\n      defaultTimeout: 10000,\n      maxRetries: 3\n    });\n    \n    this.setupMessageListener();\n    this.initializeAuthPhase();\n  }\n\n  /**\n   * Initialize auth phase - load embed iframe for authentication\n   */\n  private initializeAuthPhase(): void {\n    console.log('[InternalPluginHost] Initializing auth phase');\n    \n    // Build auth iframe URL with theme and community parameters\n    const authUrl = new URL(`${this.hostServiceUrl}/embed`);\n    authUrl.searchParams.set('theme', this.config.theme || 'light');\n    if (this.config.backgroundColor) {\n      authUrl.searchParams.set('background_color', this.config.backgroundColor);\n    }\n    if (this.config.community) {\n      authUrl.searchParams.set('community', this.config.community);\n      console.log('[InternalPluginHost] Adding community parameter to auth iframe:', this.config.community);\n    }\n    if (this.config.mode) {\n      authUrl.searchParams.set('mode', this.config.mode);\n      console.log('[InternalPluginHost] Adding mode parameter to auth iframe:', this.config.mode);\n    }\n    \n    // Add parent URL to auth iframe\n    if (this.config.parentUrl) {\n      const encodedParentUrl = encodeURIComponent(this.config.parentUrl);\n      authUrl.searchParams.set('cg_parent_url', encodedParentUrl);\n      console.log('[InternalPluginHost] Adding parent URL to auth iframe:', this.config.parentUrl);\n    }\n    \n    // Add external parameters from parent page\n    if (this.config.externalParams) {\n      console.log('[InternalPluginHost] Adding external parameters to auth iframe:', this.config.externalParams);\n      for (const [key, value] of Object.entries(this.config.externalParams)) {\n        authUrl.searchParams.set(key, value);\n      }\n    }\n    \n    // Create auth iframe\n    const iframe = document.createElement('iframe');\n    iframe.src = authUrl.toString();\n    iframe.style.width = this.config.width || '100%';\n    iframe.style.height = this.config.height || '700px';\n    iframe.style.border = 'none';\n    iframe.style.borderRadius = this.config.borderRadius || '8px';\n    iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin allow-forms allow-popups allow-popups-to-escape-sandbox');\n    iframe.setAttribute('allow', getIframePermissions());\n    \n    // Add iframe to container\n    this.container.appendChild(iframe);\n    this.currentIframe = iframe;\n    \n    console.log('[InternalPluginHost] Auth iframe loaded with theme:', this.config.theme);\n  }\n\n  /**\n   * Set up message listener for all plugin communication\n   */\n  private setupMessageListener(): void {\n    // Store listener reference for proper cleanup\n    this.messageListener = (event: MessageEvent) => {\n      this.handleMessage(event);\n    };\n    \n    window.addEventListener('message', this.messageListener);\n    console.log('[InternalPluginHost] Message listener attached for UID:', this.myUid);\n  }\n\n  /**\n   * Handle all incoming messages\n   */\n  private async handleMessage(event: MessageEvent): Promise<void> {\n    if (!event.data || typeof event.data !== 'object') {\n      return;\n    }\n\n    // Handle auth completion from embed iframe\n    if (event.data.type === 'curia-auth-complete') {\n      await this.handleAuthCompletion(event.data);\n      return;\n    }\n\n    // Handle API requests from forum\n    const message = event.data as InternalPluginMessage;\n    if (message.type === InternalMessageType.API_REQUEST) {\n      await this.handleApiRequest(message, event.source as Window);\n      return;\n    }\n\n    // Handle other message types\n    if (message.type === InternalMessageType.INIT) {\n      console.log('[InternalPluginHost] Forum initialized');\n      return;\n    }\n  }\n\n  /**\n   * Handle auth completion and switch to forum\n   */\n  private async handleAuthCompletion(authData: any): Promise<void> {\n    console.log('[InternalPluginHost] Auth completion received:', authData);\n    \n    // Store auth context including external parameters and parent URL\n    this.authContext = {\n      userId: authData.userId,\n      communityId: authData.communityId,\n      sessionToken: authData.sessionToken,\n      externalParams: authData.externalParams,\n      parentUrl: authData.parentUrl || this.config.parentUrl\n    };\n    \n    console.log('[InternalPluginHost] Auth context set:', this.authContext);\n    \n    // Check for auth-only mode\n    if (authData.mode === 'auth-only') {\n      console.log('[InternalPluginHost] \uD83C\uDFAF Auth-only mode detected - NOT switching to forum');\n      console.log('[InternalPluginHost] Auth-only flow complete - embed stays on auth-complete step');\n      return; // Don't switch to forum in auth-only mode\n    }\n    \n    // Normal flow: switch to forum phase\n    console.log('[InternalPluginHost] Normal mode - switching to forum');\n    await this.switchToForum();\n  }\n\n  /**\n   * Switch iframe from auth to forum\n   */\n  private async switchToForum(): Promise<void> {\n    console.log('[InternalPluginHost] Switching to forum phase');\n    \n    if (!this.authContext) {\n      console.error('[InternalPluginHost] Cannot switch to forum - no auth context');\n      return;\n    }\n\n    // Use our instance UID for forum communication\n    \n    // Build forum URL with parameters\n    const forumUrl = new URL(this.forumUrl);\n    forumUrl.searchParams.set('mod', 'standalone');\n    \n    // ========================================================================\n    // THEME RESOLUTION: Convert \"auto\" to actual system preference for forum\n    // ========================================================================\n    // The embed route (/embed) can handle \"auto\" theme perfectly and will \n    // apply system-aware styling. However, the main Curia forum application\n    // only understands explicit \"dark\" or \"light\" values, not \"auto\".\n    //\n    // This logic resolves \"auto\" to the user's actual system preference\n    // before sending to the forum, while preserving \"auto\" functionality\n    // in the embed authentication flow.\n    //\n    // Data Flow:\n    // 1. \u2705 Embed route gets \"auto\" \u2192 Handles system detection internally\n    // 2. \u2705 Forum route gets \"dark\"/\"light\" \u2192 Works with resolved value\n    // ========================================================================\n    let resolvedTheme = this.config.theme || 'light';\n    if (resolvedTheme === 'auto') {\n      // Detect user's system preference using standard web API\n      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n        resolvedTheme = 'dark';\n      } else {\n        resolvedTheme = 'light'; // Safe fallback default\n      }\n      console.log('[InternalPluginHost] Resolved auto theme to:', resolvedTheme, \n                  '(system prefers:', window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light', ')');\n    }\n    \n    forumUrl.searchParams.set('cg_theme', resolvedTheme);\n    if (this.config.backgroundColor) {\n      forumUrl.searchParams.set('cg_bg_color', this.config.backgroundColor);\n    }\n    forumUrl.searchParams.set('iframeUid', this.myUid);\n    \n    // Add parent URL parameter ONLY if community is pre-specified\n    if (this.config.community && this.config.parentUrl) {\n      const encodedParentUrl = encodeURIComponent(this.config.parentUrl);\n      forumUrl.searchParams.set('cg_parent_url', encodedParentUrl);\n      console.log('[InternalPluginHost] Adding parent URL (community pre-specified):', this.config.parentUrl);\n    } else if (!this.config.community) {\n      console.log('[InternalPluginHost] Skipping parent URL (no community pre-specified)');\n    }\n    \n    // Add external parameters to forum URL\n    if (this.authContext.externalParams) {\n      console.log('[InternalPluginHost] Adding external parameters to forum iframe:', this.authContext.externalParams);\n      for (const [key, value] of Object.entries(this.authContext.externalParams)) {\n        forumUrl.searchParams.set(key, value);\n      }\n    }\n    \n    console.log('[InternalPluginHost] Forum URL:', forumUrl.toString());\n    \n    // Remove existing iframe\n    if (this.currentIframe && this.currentIframe.parentElement) {\n      this.currentIframe.parentElement.removeChild(this.currentIframe);\n    }\n    \n    // Create forum iframe\n    const iframe = document.createElement('iframe');\n    iframe.src = forumUrl.toString();\n    iframe.style.width = this.config.width || '100%';\n    iframe.style.height = this.config.height || '700px';\n    iframe.style.border = 'none';\n    iframe.style.borderRadius = this.config.borderRadius || '8px';\n    iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin allow-forms allow-popups allow-popups-to-escape-sandbox');\n    iframe.setAttribute('allow', getIframePermissions());\n    \n    // Add forum iframe to container\n    this.container.appendChild(iframe);\n    this.currentIframe = iframe;\n    \n    // Set forum iframe as active iframe for API proxy\n    this.apiProxy.setActiveIframe(iframe);\n    console.log('[InternalPluginHost] API proxy client configured for forum iframe');\n    \n    console.log('[InternalPluginHost] Forum iframe loaded');\n  }\n\n  /**\n   * Handle API requests from forum\n   */\n  private async handleApiRequest(message: InternalPluginMessage, source: Window): Promise<void> {\n    try {\n      console.log('[InternalPluginHost] API request:', message.method, message.params);\n      \n      // Validate auth context\n      if (!this.authContext) {\n        throw new Error('No authentication context available');\n      }\n\n      // Instance-based UID filtering - only handle our own messages\n      if (message.iframeUid !== this.myUid) {\n        // Silently ignore messages from other embed instances\n        return;\n      }\n\n      // Validate method is provided and supported\n      if (!message.method || !['getUserInfo', 'getUserFriends', 'getContextData', 'getCommunityInfo', 'giveRole'].includes(message.method)) {\n        throw new Error(`Unknown API method: ${message.method}`);\n      }\n\n      // Use API proxy client to make request (bypasses CSP restrictions)\n      console.log('[InternalPluginHost] Making API request via proxy:', message.method);\n      const result = await this.apiProxy.makeApiRequest({\n        method: message.method as any,\n        params: message.params,\n        communityId: this.authContext.communityId,\n        userId: this.authContext.userId\n      });\n\n      console.log('[InternalPluginHost] API proxy response:', result);\n      \n      if (result.success) {\n        // Send successful response\n        this.sendResponse(source, message, result.data);\n      } else {\n        throw new Error(result.error || 'API request failed');\n      }\n      \n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      console.error('[InternalPluginHost] API error:', errorMessage);\n      this.sendError(source, message, errorMessage);\n    }\n  }\n\n  /**\n   * Send successful response to forum\n   */\n  private sendResponse(source: Window, originalMessage: InternalPluginMessage, data: any): void {\n    const response: InternalPluginMessage = {\n      type: InternalMessageType.API_RESPONSE,\n      iframeUid: originalMessage.iframeUid,\n      requestId: originalMessage.requestId,\n      data: data\n    };\n    \n    source.postMessage(response, '*');\n  }\n\n  /**\n   * Send error response to forum\n   */\n  private sendError(source: Window, originalMessage: InternalPluginMessage, error: string): void {\n    const response: InternalPluginMessage = {\n      type: InternalMessageType.API_RESPONSE,\n      iframeUid: originalMessage.iframeUid,\n      requestId: originalMessage.requestId,\n      error: error\n    };\n    \n    source.postMessage(response, '*');\n  }\n\n  /**\n   * Generate unique iframe UID\n   */\n  private generateIframeUid(): string {\n    const timestamp = Date.now().toString(36).toUpperCase();\n    const random = Math.random().toString(36).substring(2, 8).toUpperCase();\n    return `${timestamp}${random}`.substring(0, 10);\n  }\n\n  /**\n   * Cleanup when embed is destroyed\n   */\n  public destroy(): void {\n    // Remove iframe\n    if (this.currentIframe && this.currentIframe.parentElement) {\n      this.currentIframe.parentElement.removeChild(this.currentIframe);\n    }\n    \n    // Remove message listener to prevent stale listeners\n    if (this.messageListener) {\n      window.removeEventListener('message', this.messageListener);\n      this.messageListener = null;\n      console.log('[InternalPluginHost] Message listener removed');\n    }\n    \n    // Clean up API proxy client\n    if (this.apiProxy) {\n      this.apiProxy.destroy();\n      console.log('[InternalPluginHost] API proxy client destroyed');\n    }\n    \n    // Clear state\n    this.currentIframe = null;\n    this.authContext = null;\n    // myUid stays - it's not nullable and helps identify this instance in logs\n    \n    console.log('[InternalPluginHost] Destroyed instance with UID:', this.myUid);\n  }\n}\n\n ", "/**\n * Embed Script Entry Point\n * \n * This is the main entry point for the embed.js bundle.\n * It imports the actual TypeScript classes and creates a self-contained script.\n */\n\nimport { EmbedConfig } from './types/EmbedTypes';\nimport { parseEmbedConfig } from './core/EmbedConfig';\nimport { InternalPluginHost } from './plugin-host/InternalPluginHost';\n\n// Use global interface from EmbedTypes (avoids circular import issues)\n// window.curiaEmbed will be InternalPluginHost but typed as any\n\n// Get environment URLs (injected at build time via esbuild define)\ndeclare const CURIA_HOST_URL: string;\ndeclare const CURIA_FORUM_URL: string;\n\n// Capture script element during initial execution when document.currentScript works\nconst EMBED_SCRIPT_ELEMENT = document.currentScript as HTMLScriptElement;\n\n// Validate that we have the script element\nif (!EMBED_SCRIPT_ELEMENT) {\n  console.error('[Embed] Failed to capture script element during initialization');\n}\n\n/**\n * Extract curia_* parameters from parent page URL\n * Converts curia_highlight=comment-123 to ext_highlight=comment-123\n */\nfunction extractCuriaParameters(): Record<string, string> {\n  const params = new URLSearchParams(window.location.search);\n  const curiaParams: Record<string, string> = {};\n  \n  console.log('[Embed] Checking parent page URL for curia_* parameters:', window.location.search);\n  \n  for (const [key, value] of params) {\n    if (key.startsWith('curia_')) {\n      const cleanKey = key.substring(6); // Remove 'curia_' prefix\n      const externalKey = `ext_${cleanKey}`; // Add 'ext_' prefix\n      curiaParams[externalKey] = value;\n      console.log(`[Embed] Found curia parameter: ${key}=${value} \u2192 ${externalKey}=${value}`);\n    }\n  }\n  \n  return curiaParams;\n}\n\n/**\n * Strip curia_* parameters from parent page URL\n * Preserves all other query parameters but removes our internal curia_* params\n */\nfunction stripCuriaParameters(url: string): string {\n  try {\n    const urlObj = new URL(url);\n    \n    // Collect all curia_* parameter keys to delete\n    const keysToDelete: string[] = [];\n    for (const [key] of urlObj.searchParams) {\n      if (key.startsWith('curia_')) {\n        keysToDelete.push(key);\n      }\n    }\n    \n    // Delete all curia_* parameters\n    for (const key of keysToDelete) {\n      urlObj.searchParams.delete(key);\n    }\n    \n    if (keysToDelete.length > 0) {\n      console.log('[Embed] Stripped curia_* parameters:', keysToDelete);\n    }\n    \n    return urlObj.toString();\n  } catch (error) {\n    console.warn('[Embed] Failed to parse parent URL, using original:', url);\n    return url;\n  }\n}\n\n// Main embed initialization function\nfunction initializeEmbed() {\n  console.log('[Embed] Initializing Curia embed script...');\n\n  try {\n    // Capture parent page URL and strip curia_* parameters to prevent recursion\n    const rawParentUrl = window.location.href;\n    const parentUrl = stripCuriaParameters(rawParentUrl);\n    console.log('[Embed] Raw parent page URL:', rawParentUrl);\n    console.log('[Embed] Clean parent page URL (curia_* stripped):', parentUrl);\n    \n    // Extract external parameters from parent page URL\n    const externalParams = extractCuriaParameters();\n    \n    // Parse configuration from script attributes using captured script element\n    // If capture failed, parseEmbedConfig will try document.currentScript as fallback\n    const config = parseEmbedConfig(EMBED_SCRIPT_ELEMENT);\n    \n    // Add parent URL to config\n    config.parentUrl = parentUrl;\n    \n    // Add external parameters to config\n    if (Object.keys(externalParams).length > 0) {\n      config.externalParams = externalParams;\n      console.log('[Embed] External parameters added to config:', externalParams);\n    }\n    \n    console.log('[Embed] Final parsed config:', config);\n\n    // Find or create target container\n    const containerId = config.container || 'curia-forum';\n    let container = document.getElementById(containerId);\n    \n    if (!container) {\n      console.log(`[Embed] Container \"${containerId}\" not found, creating it`);\n      container = document.createElement('div');\n      container.id = containerId;\n      \n      // Try to insert next to script element, otherwise append to body\n      if (EMBED_SCRIPT_ELEMENT?.parentNode) {\n        EMBED_SCRIPT_ELEMENT.parentNode.insertBefore(container, EMBED_SCRIPT_ELEMENT.nextSibling);\n      } else {\n        console.warn('[Embed] No script element available, appending container to body');\n        document.body.appendChild(container);\n      }\n    }\n\n    // Clean up any existing embed instance\n    if (window.curiaEmbed) {\n      console.log('[Embed] Cleaning up existing embed instance');\n      window.curiaEmbed.destroy();\n      delete window.curiaEmbed;\n    }\n\n    // Create new embed instance using the real TypeScript class\n    console.log('[Embed] Creating InternalPluginHost instance');\n    const embedInstance = new InternalPluginHost(\n      container,\n      config,\n      CURIA_HOST_URL,\n      CURIA_FORUM_URL\n    );\n\n    // Store global reference for cleanup\n    window.curiaEmbed = embedInstance;\n    \n    console.log('[Embed] Embed initialized successfully');\n    \n  } catch (error) {\n    console.error('[Embed] Failed to initialize embed:', error);\n  }\n}\n\n// Auto-initialize when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initializeEmbed);\n} else {\n  // DOM already loaded, initialize immediately\n  initializeEmbed();\n} "],
  "mappings": "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",
  "names": ["MessageType", "ProxyErrorType", "ApiProxyClient"]
}
