{
  "version": 3,
  "sources": ["../src/lib/embed/core/EmbedConfig.ts", "../src/lib/embed/plugin-host/InternalPluginHost.ts", "../src/lib/embed/embed-entry.ts"],
  "sourcesContent": ["/**\n * Embed Configuration Module\n * \n * Handles parsing configuration from script data attributes\n */\n\nimport { EmbedConfig } from '../types/EmbedTypes';\n\n/**\n * Parse configuration from script data attributes\n */\nexport function parseEmbedConfig(scriptElement?: HTMLScriptElement): EmbedConfig {\n  // Get the script element - either passed in or from document.currentScript\n  const script = scriptElement || (document.currentScript as HTMLScriptElement);\n  if (!script) {\n    throw new Error('[Curia] Could not find script element');\n  }\n\n  // Read configuration from data attributes\n  const config: EmbedConfig = {\n    community: script.getAttribute('data-community') || null,\n    theme: (script.getAttribute('data-theme') as 'light' | 'dark' | 'auto') || 'light',\n    backgroundColor: script.getAttribute('data-background-color') || undefined,\n    borderRadius: script.getAttribute('data-border-radius') || undefined,\n    container: script.getAttribute('data-container') || null,\n    height: script.getAttribute('data-height') || '600px',\n    width: script.getAttribute('data-width') || '100%',\n    mode: (script.getAttribute('data-mode') as 'full' | 'auth-only') || 'full'\n  };\n\n  console.log('[Curia] Parsed embed config:', config);\n  return config;\n}\n\n/**\n * Validate embed configuration\n */\nexport function validateEmbedConfig(config: EmbedConfig): void {\n  // Validate theme\n  if (config.theme !== 'light' && config.theme !== 'dark' && config.theme !== 'auto') {\n    console.warn('[Curia] Invalid theme, using light:', config.theme);\n    config.theme = 'light';\n  }\n\n  // Validate background color (if provided)\n  if (config.backgroundColor && !config.backgroundColor.match(/^#[0-9A-Fa-f]{6}$/)) {\n    console.warn('[Curia] Invalid background color format, removing:', config.backgroundColor);\n    config.backgroundColor = undefined;\n  }\n\n  // Validate height format\n  if (config.height && !config.height.match(/^\\d+(px|%|vh|em|rem)$/)) {\n    console.warn('[Curia] Invalid height format, using 600px:', config.height);\n    config.height = '600px';\n  }\n\n  // Validate width format\n  if (config.width && !config.width.match(/^\\d+(px|%|vw|em|rem)$/)) {\n    console.warn('[Curia] Invalid width format, using 100%:', config.width);\n    config.width = '100%';\n  }\n}\n\n/**\n * Generate embed script configuration JavaScript\n */\nexport function generateConfigCode(config: EmbedConfig): string {\n  return `\n  // Get the script element that loaded this code\n  const script = document.currentScript;\n  if (!script) {\n    console.error('[Curia] Could not find script element');\n    return;\n  }\n\n  // Read configuration from data attributes\n  const config = {\n    community: script.getAttribute('data-community') || null,\n    theme: script.getAttribute('data-theme') || 'light',\n    backgroundColor: script.getAttribute('data-background-color') || undefined,\n    borderRadius: script.getAttribute('data-border-radius') || undefined,\n    container: script.getAttribute('data-container') || null,\n    height: script.getAttribute('data-height') || '600px',\n    width: script.getAttribute('data-width') || '100%'\n  };\n\n  console.log('[Curia] Initializing embed with config:', config);\n  `;\n} ", "/**\n * Internal Plugin Host - Self-contained plugin hosting within embed script\n * \n * This class embeds all ClientPluginHost functionality directly into the embed script,\n * making it completely self-contained so customers don't need to implement any logic.\n * \n * Responsibilities:\n * 1. Handle auth completion from embed iframe\n * 2. Manage iframe switching (auth \u2192 forum)\n * 3. Route API requests from forum to host service\n * 4. Maintain auth context throughout session\n */\n\nimport { EmbedConfig } from '../types/EmbedTypes';\n\n/**\n * Authentication context for API requests\n */\nexport interface InternalAuthContext {\n  userId: string;\n  communityId: string;\n  sessionToken?: string;\n}\n\n/**\n * Message types for internal communication\n */\nenum InternalMessageType {\n  API_REQUEST = 'api_request',\n  API_RESPONSE = 'api_response',\n  INIT = 'init',\n  ERROR = 'error'\n}\n\n/**\n * Internal plugin message interface\n */\ninterface InternalPluginMessage {\n  type: InternalMessageType;\n  iframeUid: string;\n  requestId: string;\n  method?: string;\n  params?: any;\n  data?: any;\n  error?: string;\n}\n\n/**\n * Get iframe permissions for forum functionality\n */\nfunction getIframePermissions(): string {\n  return [\n    'clipboard-write *',\n    'clipboard-read *', \n    'fullscreen *',\n    'web-share *',\n    'autoplay *',\n    'picture-in-picture *',\n    'payment *',\n    'encrypted-media *',\n    'storage-access *',\n    'camera *',\n    'microphone *',\n    'geolocation *'\n  ].join('; ');\n}\n\n/**\n * Internal Plugin Host - completely self-contained within embed script\n */\nexport class InternalPluginHost {\n  private container: HTMLElement;\n  private config: EmbedConfig;\n  private authContext: InternalAuthContext | null = null;\n  private currentIframe: HTMLIFrameElement | null = null;\n  private myUid: string; // Instance-specific UID (not singleton)\n  private hostServiceUrl: string;\n  private forumUrl: string;\n  private messageListener: ((event: MessageEvent) => void) | null = null;\n\n  constructor(container: HTMLElement, config: EmbedConfig, hostServiceUrl: string, forumUrl: string) {\n    this.container = container;\n    this.config = config;\n    this.hostServiceUrl = hostServiceUrl;\n    this.forumUrl = forumUrl;\n    this.myUid = this.generateIframeUid(); // Generate instance-specific UID\n    \n    this.setupMessageListener();\n    this.initializeAuthPhase();\n  }\n\n  /**\n   * Initialize auth phase - load embed iframe for authentication\n   */\n  private initializeAuthPhase(): void {\n    console.log('[InternalPluginHost] Initializing auth phase');\n    \n    // Build auth iframe URL with theme and community parameters\n    const authUrl = new URL(`${this.hostServiceUrl}/embed`);\n    authUrl.searchParams.set('theme', this.config.theme || 'light');\n    if (this.config.backgroundColor) {\n      authUrl.searchParams.set('background_color', this.config.backgroundColor);\n    }\n    if (this.config.community) {\n      authUrl.searchParams.set('community', this.config.community);\n      console.log('[InternalPluginHost] Adding community parameter to auth iframe:', this.config.community);\n    }\n    if (this.config.mode) {\n      authUrl.searchParams.set('mode', this.config.mode);\n      console.log('[InternalPluginHost] Adding mode parameter to auth iframe:', this.config.mode);\n    }\n    \n    // Create auth iframe\n    const iframe = document.createElement('iframe');\n    iframe.src = authUrl.toString();\n    iframe.style.width = this.config.width || '100%';\n    iframe.style.height = this.config.height || '700px';\n    iframe.style.border = 'none';\n    iframe.style.borderRadius = this.config.borderRadius || '8px';\n    iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin allow-forms allow-popups allow-popups-to-escape-sandbox');\n    iframe.setAttribute('allow', getIframePermissions());\n    \n    // Add iframe to container\n    this.container.appendChild(iframe);\n    this.currentIframe = iframe;\n    \n    console.log('[InternalPluginHost] Auth iframe loaded with theme:', this.config.theme);\n  }\n\n  /**\n   * Set up message listener for all plugin communication\n   */\n  private setupMessageListener(): void {\n    // Store listener reference for proper cleanup\n    this.messageListener = (event: MessageEvent) => {\n      this.handleMessage(event);\n    };\n    \n    window.addEventListener('message', this.messageListener);\n    console.log('[InternalPluginHost] Message listener attached for UID:', this.myUid);\n  }\n\n  /**\n   * Handle all incoming messages\n   */\n  private async handleMessage(event: MessageEvent): Promise<void> {\n    if (!event.data || typeof event.data !== 'object') {\n      return;\n    }\n\n    // Handle auth completion from embed iframe\n    if (event.data.type === 'curia-auth-complete') {\n      await this.handleAuthCompletion(event.data);\n      return;\n    }\n\n    // Handle API requests from forum\n    const message = event.data as InternalPluginMessage;\n    if (message.type === InternalMessageType.API_REQUEST) {\n      await this.handleApiRequest(message, event.source as Window);\n      return;\n    }\n\n    // Handle other message types\n    if (message.type === InternalMessageType.INIT) {\n      console.log('[InternalPluginHost] Forum initialized');\n      return;\n    }\n  }\n\n  /**\n   * Handle auth completion and switch to forum\n   */\n  private async handleAuthCompletion(authData: any): Promise<void> {\n    console.log('[InternalPluginHost] Auth completion received:', authData);\n    \n    // Store auth context\n    this.authContext = {\n      userId: authData.userId,\n      communityId: authData.communityId,\n      sessionToken: authData.sessionToken\n    };\n    \n    console.log('[InternalPluginHost] Auth context set:', this.authContext);\n    \n    // Check for auth-only mode\n    if (authData.mode === 'auth-only') {\n      console.log('[InternalPluginHost] \uD83C\uDFAF Auth-only mode detected - NOT switching to forum');\n      console.log('[InternalPluginHost] Auth-only flow complete - embed stays on auth-complete step');\n      return; // Don't switch to forum in auth-only mode\n    }\n    \n    // Normal flow: switch to forum phase\n    console.log('[InternalPluginHost] Normal mode - switching to forum');\n    await this.switchToForum();\n  }\n\n  /**\n   * Switch iframe from auth to forum\n   */\n  private async switchToForum(): Promise<void> {\n    console.log('[InternalPluginHost] Switching to forum phase');\n    \n    if (!this.authContext) {\n      console.error('[InternalPluginHost] Cannot switch to forum - no auth context');\n      return;\n    }\n\n    // Use our instance UID for forum communication\n    \n    // Build forum URL with parameters\n    const forumUrl = new URL(this.forumUrl);\n    forumUrl.searchParams.set('mod', 'standalone');\n    \n    // ========================================================================\n    // THEME RESOLUTION: Convert \"auto\" to actual system preference for forum\n    // ========================================================================\n    // The embed route (/embed) can handle \"auto\" theme perfectly and will \n    // apply system-aware styling. However, the main Curia forum application\n    // only understands explicit \"dark\" or \"light\" values, not \"auto\".\n    //\n    // This logic resolves \"auto\" to the user's actual system preference\n    // before sending to the forum, while preserving \"auto\" functionality\n    // in the embed authentication flow.\n    //\n    // Data Flow:\n    // 1. \u2705 Embed route gets \"auto\" \u2192 Handles system detection internally\n    // 2. \u2705 Forum route gets \"dark\"/\"light\" \u2192 Works with resolved value\n    // ========================================================================\n    let resolvedTheme = this.config.theme || 'light';\n    if (resolvedTheme === 'auto') {\n      // Detect user's system preference using standard web API\n      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n        resolvedTheme = 'dark';\n      } else {\n        resolvedTheme = 'light'; // Safe fallback default\n      }\n      console.log('[InternalPluginHost] Resolved auto theme to:', resolvedTheme, \n                  '(system prefers:', window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light', ')');\n    }\n    \n    forumUrl.searchParams.set('cg_theme', resolvedTheme);\n    if (this.config.backgroundColor) {\n      forumUrl.searchParams.set('cg_bg_color', this.config.backgroundColor);\n    }\n    forumUrl.searchParams.set('iframeUid', this.myUid);\n    \n    console.log('[InternalPluginHost] Forum URL:', forumUrl.toString());\n    \n    // Remove existing iframe\n    if (this.currentIframe && this.currentIframe.parentElement) {\n      this.currentIframe.parentElement.removeChild(this.currentIframe);\n    }\n    \n    // Create forum iframe\n    const iframe = document.createElement('iframe');\n    iframe.src = forumUrl.toString();\n    iframe.style.width = this.config.width || '100%';\n    iframe.style.height = this.config.height || '700px';\n    iframe.style.border = 'none';\n    iframe.style.borderRadius = this.config.borderRadius || '8px';\n    iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin allow-forms allow-popups allow-popups-to-escape-sandbox');\n    iframe.setAttribute('allow', getIframePermissions());\n    \n    // Add forum iframe to container\n    this.container.appendChild(iframe);\n    this.currentIframe = iframe;\n    \n    console.log('[InternalPluginHost] Forum iframe loaded');\n  }\n\n  /**\n   * Handle API requests from forum\n   */\n  private async handleApiRequest(message: InternalPluginMessage, source: Window): Promise<void> {\n    try {\n      console.log('[InternalPluginHost] API request:', message.method, message.params);\n      \n      // Validate auth context\n      if (!this.authContext) {\n        throw new Error('No authentication context available');\n      }\n\n      // Instance-based UID filtering - only handle our own messages\n      if (message.iframeUid !== this.myUid) {\n        // Silently ignore messages from other embed instances\n        return;\n      }\n\n      // Determine API endpoint\n      let apiEndpoint: string;\n      switch (message.method) {\n        case 'getUserInfo':\n        case 'getUserFriends':\n        case 'getContextData':\n          apiEndpoint = `${this.hostServiceUrl}/api/user`;\n          break;\n          \n        case 'getCommunityInfo':\n        case 'giveRole':\n          apiEndpoint = `${this.hostServiceUrl}/api/community`;\n          break;\n          \n        default:\n          throw new Error(`Unknown API method: ${message.method}`);\n      }\n\n      // Make request to host service\n      const response = await fetch(apiEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          method: message.method,\n          params: message.params,\n          communityId: this.authContext.communityId,\n          userId: this.authContext.userId\n        })\n      });\n\n      const result = await response.json();\n      \n      if (result.success) {\n        // Send successful response\n        this.sendResponse(source, message, result.data);\n      } else {\n        throw new Error(result.error || 'API request failed');\n      }\n      \n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      console.error('[InternalPluginHost] API error:', errorMessage);\n      this.sendError(source, message, errorMessage);\n    }\n  }\n\n  /**\n   * Send successful response to forum\n   */\n  private sendResponse(source: Window, originalMessage: InternalPluginMessage, data: any): void {\n    const response: InternalPluginMessage = {\n      type: InternalMessageType.API_RESPONSE,\n      iframeUid: originalMessage.iframeUid,\n      requestId: originalMessage.requestId,\n      data: data\n    };\n    \n    source.postMessage(response, '*');\n  }\n\n  /**\n   * Send error response to forum\n   */\n  private sendError(source: Window, originalMessage: InternalPluginMessage, error: string): void {\n    const response: InternalPluginMessage = {\n      type: InternalMessageType.API_RESPONSE,\n      iframeUid: originalMessage.iframeUid,\n      requestId: originalMessage.requestId,\n      error: error\n    };\n    \n    source.postMessage(response, '*');\n  }\n\n  /**\n   * Generate unique iframe UID\n   */\n  private generateIframeUid(): string {\n    const timestamp = Date.now().toString(36).toUpperCase();\n    const random = Math.random().toString(36).substring(2, 8).toUpperCase();\n    return `${timestamp}${random}`.substring(0, 10);\n  }\n\n  /**\n   * Cleanup when embed is destroyed\n   */\n  public destroy(): void {\n    // Remove iframe\n    if (this.currentIframe && this.currentIframe.parentElement) {\n      this.currentIframe.parentElement.removeChild(this.currentIframe);\n    }\n    \n    // Remove message listener to prevent stale listeners\n    if (this.messageListener) {\n      window.removeEventListener('message', this.messageListener);\n      this.messageListener = null;\n      console.log('[InternalPluginHost] Message listener removed');\n    }\n    \n    // Clear state\n    this.currentIframe = null;\n    this.authContext = null;\n    // myUid stays - it's not nullable and helps identify this instance in logs\n    \n    console.log('[InternalPluginHost] Destroyed instance with UID:', this.myUid);\n  }\n}\n\n ", "/**\n * Embed Script Entry Point\n * \n * This is the main entry point for the embed.js bundle.\n * It imports the actual TypeScript classes and creates a self-contained script.\n */\n\nimport { EmbedConfig } from './types/EmbedTypes';\nimport { parseEmbedConfig } from './core/EmbedConfig';\nimport { InternalPluginHost } from './plugin-host/InternalPluginHost';\n\n// Use global interface from EmbedTypes (avoids circular import issues)\n// window.curiaEmbed will be InternalPluginHost but typed as any\n\n// Get environment URLs (injected at build time via esbuild define)\ndeclare const CURIA_HOST_URL: string;\ndeclare const CURIA_FORUM_URL: string;\n\n// Capture script element during initial execution when document.currentScript works\nconst EMBED_SCRIPT_ELEMENT = document.currentScript as HTMLScriptElement;\n\n// Validate that we have the script element\nif (!EMBED_SCRIPT_ELEMENT) {\n  console.error('[Embed] Failed to capture script element during initialization');\n}\n\n// Main embed initialization function\nfunction initializeEmbed() {\n  console.log('[Embed] Initializing Curia embed script...');\n\n  try {\n    // Parse configuration from script attributes using captured script element\n    // If capture failed, parseEmbedConfig will try document.currentScript as fallback\n    const config = parseEmbedConfig(EMBED_SCRIPT_ELEMENT);\n    console.log('[Embed] Parsed config:', config);\n\n    // Find or create target container\n    const containerId = config.container || 'curia-forum';\n    let container = document.getElementById(containerId);\n    \n    if (!container) {\n      console.log(`[Embed] Container \"${containerId}\" not found, creating it`);\n      container = document.createElement('div');\n      container.id = containerId;\n      \n      // Try to insert next to script element, otherwise append to body\n      if (EMBED_SCRIPT_ELEMENT?.parentNode) {\n        EMBED_SCRIPT_ELEMENT.parentNode.insertBefore(container, EMBED_SCRIPT_ELEMENT.nextSibling);\n      } else {\n        console.warn('[Embed] No script element available, appending container to body');\n        document.body.appendChild(container);\n      }\n    }\n\n    // Clean up any existing embed instance\n    if (window.curiaEmbed) {\n      console.log('[Embed] Cleaning up existing embed instance');\n      window.curiaEmbed.destroy();\n      delete window.curiaEmbed;\n    }\n\n    // Create new embed instance using the real TypeScript class\n    console.log('[Embed] Creating InternalPluginHost instance');\n    const embedInstance = new InternalPluginHost(\n      container,\n      config,\n      CURIA_HOST_URL,\n      CURIA_FORUM_URL\n    );\n\n    // Store global reference for cleanup\n    window.curiaEmbed = embedInstance;\n    \n    console.log('[Embed] Embed initialized successfully');\n    \n  } catch (error) {\n    console.error('[Embed] Failed to initialize embed:', error);\n  }\n}\n\n// Auto-initialize when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initializeEmbed);\n} else {\n  // DOM already loaded, initialize immediately\n  initializeEmbed();\n} "],
  "mappings": "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",
  "names": []
}
